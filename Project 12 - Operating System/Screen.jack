// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {

    static boolean color;
    static Array screen;
    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
        var int i;
        let screen = 16384;
        let color = true;
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let i = 1;
        while ( i < 16 ){
         let twoToThe[i] = twoToThe[i-1] + twoToThe [i-1];

         let i = i + 1;
        }
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while (i < 8192){
            let screen[i] = false;
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, bit;

        let address = Screen.getAddress(x, y);
        let bit = twoToThe[x & 15];  // x & 15 = x % 16 - that is the bit we want to change
        if (color) {
            let screen[address] = screen[address] | bit;
        }
        else {
            let screen[address] = screen[address] & ~bit;
        }
        return;

    }

    /** calculates the address according to 32*y + x/16 with no multiplication. */
    function int getAddress(int x, int y) {
        var int address, i, shiftedY;
        let shiftedY = y;
        let i =0;
        while (i < 5) {
            let shiftedY = shiftedY + shiftedY;
            let i = i + 1;
            }
        return (shiftedY + (x/16));
        }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        if (x1 = x2) {
            do Screen.drawVerticalLine(x1, y1, y2);
            return;
        }
        if (y1 = y2) {
            do Screen.drawHorizontalLine(x1, x2, y1);
            return;
        }
        if ((x1 < x2) & (y1 < y2)){
            do Screen.drawDiagDownLine(x1, y1, x2, y2);
            return;
        }
        if ((x1 > x2) & (y1 > y2)){
            do Screen.drawDiagDownLine(x2, y2, x1, y1);
            return;
        }
        if ((x1 < x2) & (y1 > y2)){
            do Screen.drawDiagUpLine(x1, y1, x2, y2);
            return;
        }

        if ((x1 > x2) & (y1 < y2)){
            do Screen.drawDiagUpLine(x2, y2, x1, y1);
            return;
        }
        return;
    }

    /** Draws a vertical line. */
    function void drawVerticalLine(int x, int y1, int y2) {
        // check if y1 is bigger than y2, if so we switch them
        var int temp;
        if (y1 > y2){
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }

        // we draw the vertical line
        while (~(y1 > y2)){
            do Screen.drawPixel(x, y1);
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a horizontal line. */
    function void drawHorizontalLine(int x1, int x2, int y) {
        // check if x1 is bigger than x2, if so we switch them
        var int temp, x, address;
        if (x1 > x2){
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
        }

        // we draw the horizontal line like the fill method (we try to
        // draw as many pixels as we can (16) at once
        let x = x1;
        while (~(x > x2)){
            if((~((x & 15) = 0)) | ((x + 15) > x2)) {
				do Screen.drawPixel(x, y);
				let x = x + 1;
			} else {
				let address = Screen.getAddress(x, y);
				if(color){
					do Memory.poke(screen + address, -1);
				} else {
					do Memory.poke(screen + address, 0);
				}
				let x = x + 16;
			}
		}
		return;
    }

    /** Draws a Diagonal line with a negative slope. */
    function void drawDiagDownLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, b, diff;
        let dx = x2 - x1;
        let dy = y2 - y1;
        let a = 0;
        let b = 0;
        let diff = 0;
        while ((a < dx) & (b < dy)){
            do Screen.drawPixel(x1 + a, y1 + b);
            if (diff > 0) {
                let a = a + 1;
                let diff = diff - dy;
            }
            else {
                let b = b + 1;
                let diff = diff + dx;
            }
        }
        return;
    }

    /** Draws a Diagonal line with a positive slope. */
    function void drawDiagUpLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, b, diff;
        let dx = x2 - x1;
        let dy = y2 - y1;
        let a = 0;
        let b = 0;
        let diff = 0;
        while ((a < dx) & (b > dy)){
            do Screen.drawPixel(x1 + a, y1 + b);
            if (diff > 0) {
                let b = b - 1;
                let diff = diff - dx;
            }
            else {
                let a = a + 1;
                let diff = diff - dy;
            }
        }
        return;
    }


    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        while (~ (y1 > y2)){
            do Screen.drawHorizontalLine(x1, x2, y1);
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, dx, rSquared;
        let dy = -r;
        let rSquared = r*r;

        while (~(dy > r)){
            let dx = Math.sqrt(rSquared - (dy*dy));
            do Screen.drawHorizontalLine(x-dx, x+dx, y+dy);
            let dy = dy + 1;
        }
        return;
    }
}
