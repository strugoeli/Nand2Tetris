// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram ,heap, freeList;
    static int lastNode;
    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let freeList = heap;
        let heap[0] = 0; // next
        let heap[1] = 14335; // length
        let lastNode = 2048;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int block;
        let block = Memory.searchBlock(size);
        return block;
    }

    function void removeNode(int prev, int curr, int next){

        if (curr = freeList){
            let freeList = next;
            let lastNode = freeList;
            let ram[lastNode] = 0;
            return;
        }
        if ( curr = lastNode)
        {
            let lastNode = prev;
            let ram[prev] = 0;
            return;
        }

        let ram[prev] = ram[next];
        let ram[curr] = 0;
        return;

    }

    function int searchBlock(int size ){
        var int seg,prev,next,diff;
        let seg = freeList;
        while ( Memory.getLength(seg)< size + 2)
        {
            if ( Memory.getNext(seg) = 0)
            {
                return -1;
            }
            let prev = seg;
            let seg = Memory.getNext(seg);
        }

        let diff  =  Memory.getLength(seg)- size;

         if ( diff > 2 ){
             let next = seg + 2 + size;
             let ram[next] = Memory.getNext(seg);
             let ram[next + 1] = diff;
             let ram[seg] = 0;
             let ram[seg + 1] = size;
        }
         else{
              let next = Memory.getNext(seg);
         }

        do Memory.removeNode(prev,seg,next);

        return  seg + 2;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {

      var int tempNext ,seg;
      let seg = o - 2 ;
      let ram[lastNode] = seg;
      let ram[seg] = 0;
      let lastNode = o-2;
      return;
    }

     function int getNext(int segment) {
        return ram[segment];
    }
    function int getLength(int segment) {
        return ram[segment + 1];

    }
}





